{"name": "Check the change in the number of rows in the table", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <select aria-label=\"rows per page\">...</select> is not clickable at point (1056, 931). Other element would receive the click: <span>...</span>\n  (Session info: chrome=116.0.5845.96)\nStacktrace:\n\tGetHandleVerifier [0x00E437C3+48947]\n\t(No symbol) [0x00DD8551]\n\t(No symbol) [0x00CDC92D]\n\t(No symbol) [0x00D0E276]\n\t(No symbol) [0x00D0CF4D]\n\t(No symbol) [0x00D0B74B]\n\t(No symbol) [0x00D0ABA5]\n\t(No symbol) [0x00D03420]\n\t(No symbol) [0x00D2508C]\n\t(No symbol) [0x00D02EB6]\n\t(No symbol) [0x00D253E4]\n\t(No symbol) [0x00D375DA]\n\t(No symbol) [0x00D24E86]\n\t(No symbol) [0x00D016C7]\n\t(No symbol) [0x00D0284D]\n\tGetHandleVerifier [0x0108FDF9+2458985]\n\tGetHandleVerifier [0x010D744F+2751423]\n\tGetHandleVerifier [0x010D1361+2726609]\n\tGetHandleVerifier [0x00EC0680+560624]\n\t(No symbol) [0x00DE238C]\n\t(No symbol) [0x00DDE268]\n\t(No symbol) [0x00DDE392]\n\t(No symbol) [0x00DD10B7]\n\tBaseThreadInitThunk [0x75BB00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77287B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77287AEE+238]", "trace": "self = <elements_test.TestElements.TestWebTable object at 0x000002CA9FB6AA50>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6d2f8ea0dccaae86355ae2629fc7a34d\")>\n\n    @allure.title('Check the change in the number of rows in the table')\n    def test_web_table_change_count_row(self, driver):\n        web_table_page = WebTablePage(driver, 'https://demoqa.com/webtables')\n        web_table_page.open()\n>       count = web_table_page.select_up_to_some_rows()\n\ntests\\elements_test.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\elements_page.py:150: in select_up_to_some_rows\n    count_row_button.click()           # заменим метод селект\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CA9FC80190>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77287B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77287AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <select aria-label=\"rows per page\">...</select> is not clickable at point (1056, 931). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=116.0.5845.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E437C3+48947]\nE       \t(No symbol) [0x00DD8551]\nE       \t(No symbol) [0x00CDC92D]\nE       \t(No symbol) [0x00D0E276]\nE       \t(No symbol) [0x00D0CF4D]\nE       \t(No symbol) [0x00D0B74B]\nE       \t(No symbol) [0x00D0ABA5]\nE       \t(No symbol) [0x00D03420]\nE       \t(No symbol) [0x00D2508C]\nE       \t(No symbol) [0x00D02EB6]\nE       \t(No symbol) [0x00D253E4]\nE       \t(No symbol) [0x00D375DA]\nE       \t(No symbol) [0x00D24E86]\nE       \t(No symbol) [0x00D016C7]\nE       \t(No symbol) [0x00D0284D]\nE       \tGetHandleVerifier [0x0108FDF9+2458985]\nE       \tGetHandleVerifier [0x010D744F+2751423]\nE       \tGetHandleVerifier [0x010D1361+2726609]\nE       \tGetHandleVerifier [0x00EC0680+560624]\nE       \t(No symbol) [0x00DE238C]\nE       \t(No symbol) [0x00DDE268]\nE       \t(No symbol) [0x00DDE392]\nE       \t(No symbol) [0x00DD10B7]\nE       \tBaseThreadInitThunk [0x75BB00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77287B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77287AEE+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1692526049938, "stop": 1692526090829, "uuid": "71ad34dc-fa7b-42c4-9441-b4dd3cb0be23", "historyId": "e3b9295d0095f253dc775db4c83d28ab", "testCaseId": "e3b9295d0095f253dc775db4c83d28ab", "fullName": "tests.elements_test.TestWebTable#test_web_table_change_count_row", "labels": [{"name": "feature", "value": "WebTable"}, {"name": "suite", "value": "Elements"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestElements"}, {"name": "host", "value": "DESKTOP-2KQKO12"}, {"name": "thread", "value": "4092-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.elements_test"}]}